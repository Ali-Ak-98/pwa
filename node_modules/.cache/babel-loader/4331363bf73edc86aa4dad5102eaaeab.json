{"ast":null,"code":"var _jsxFileName = \"/home/ali/Desktop/pwa/src/Today.js\";\nimport React, { Component } from 'react';\nimport './Today.css';\nimport axios from 'axios';\nimport Pusher from 'pusher-js';\n\nclass Today extends Component {\n  // Adds a class constructor that assigns the initial state values:\n  constructor() {\n    super();\n    this.state = {\n      btcprice: '',\n      ltcprice: '',\n      ethprice: ''\n    };\n  } // This is called when an instance of a component is being created and inserted into the DOM.\n\n\n  componentWillMount() {\n    axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD').then(response => {\n      // We set the latest prices in the state to the prices gotten from Cryptocurrency.\n      this.setState({\n        btcprice: response.data.BTC.USD\n      });\n      this.setState({\n        ethprice: response.data.ETH.USD\n      });\n      this.setState({\n        ltcprice: response.data.LTC.USD\n      });\n    }) // Catch any error here\n    .catch(error => {\n      console.log(error);\n    }); // establish a connection to Pusher\n\n    this.pusher = new Pusher('9dc96423f52ba07a787b', {\n      cluster: 'eu',\n      encrypted: true\n    }); // Subscribe to the 'coin-prices' channel\n\n    this.prices = this.pusher.subscribe('coin-prices');\n  }\n\n  sendPricePusher(data) {\n    axios.post('/prices/new', {\n      prices: data\n    }).then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD').then(response => {\n        this.sendPricePusher(response.data);\n      }).catch(error => {\n        console.log(error);\n      });\n    }, 10000); // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes\n\n    this.prices.bind('prices', price => {\n      this.setState({\n        btcprice: price.prices.BTC.USD\n      });\n      this.setState({\n        ethprice: price.prices.ETH.USD\n      });\n      this.setState({\n        ltcprice: price.prices.LTC.USD\n      });\n    }, this);\n  } // The render method contains the JSX code which will be compiled to HTML.\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"today--section container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, \"Current Price\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"columns today--section__box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column btc--section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, \"$\", this.state.btcprice), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, \"1 BTC\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column eth--section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }, \"$\", this.state.ethprice), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, \"1 ETH\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column ltc--section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }\n    }, \"$\", this.state.ltcprice), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }\n    }, \"1 LTC\"))));\n  }\n\n}\n\nexport default Today;","map":{"version":3,"sources":["/home/ali/Desktop/pwa/src/Today.js"],"names":["React","Component","axios","Pusher","Today","constructor","state","btcprice","ltcprice","ethprice","componentWillMount","get","then","response","setState","data","BTC","USD","ETH","LTC","catch","error","console","log","pusher","cluster","encrypted","prices","subscribe","sendPricePusher","post","componentDidMount","setInterval","bind","price","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Today.css'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\n\n\n\nclass Today extends Component {\n    // Adds a class constructor that assigns the initial state values:\n    constructor () {\n        super();\n        this.state = {\n            btcprice: '',\n            ltcprice: '',\n            ethprice: ''\n        };\n    }\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount () {\n        axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n            .then(response => {\n                // We set the latest prices in the state to the prices gotten from Cryptocurrency.\n                this.setState({ btcprice: response.data.BTC.USD });\n                this.setState({ ethprice: response.data.ETH.USD });\n                this.setState({ ltcprice: response.data.LTC.USD });\n            })\n            // Catch any error here\n            .catch(error => {\n                console.log(error)\n            })\n\n        // establish a connection to Pusher\n        this.pusher = new Pusher('9dc96423f52ba07a787b', {\n            cluster: 'eu',\n            encrypted: true\n        });\n        // Subscribe to the 'coin-prices' channel\n        this.prices = this.pusher.subscribe('coin-prices');\n    }\n\n    sendPricePusher (data) {\n        axios.post('/prices/new', {\n            prices: data\n        })\n            .then(response => {\n                console.log(response)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    componentDidMount () {\n        setInterval(() => {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n                .then(response => {\n                    this.sendPricePusher (response.data)\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        }, 10000)\n\n        // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes\n        this.prices.bind('prices', price => {\n            this.setState({ btcprice: price.prices.BTC.USD });\n            this.setState({ ethprice: price.prices.ETH.USD });\n            this.setState({ ltcprice: price.prices.LTC.USD });\n        }, this);\n    }\n\n    // The render method contains the JSX code which will be compiled to HTML.\n    render() {\n        return (\n            <div className=\"today--section container\">\n                <h2>Current Price</h2>\n                <div className=\"columns today--section__box\">\n                    <div className=\"column btc--section\">\n                        <h5>${this.state.btcprice}</h5>\n                        <p>1 BTC</p>\n                    </div>\n                    <div className=\"column eth--section\">\n                        <h5>${this.state.ethprice}</h5>\n                        <p>1 ETH</p>\n                    </div>\n                    <div className=\"column ltc--section\">\n                        <h5>${this.state.ltcprice}</h5>\n                        <p>1 LTC</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Today;\n"]},"metadata":{},"sourceType":"module"}