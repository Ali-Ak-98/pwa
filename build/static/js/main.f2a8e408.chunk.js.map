{"version":3,"sources":["Today.js","History.js","App.js","serviceWorker.js","index.js"],"names":["Today","state","btcprice","ltcprice","ethprice","axios","get","then","response","setState","data","BTC","USD","localStorage","setItem","ETH","LTC","catch","error","console","log","this","pusher","Pusher","cluster","encrypted","prices","subscribe","post","navigator","onLine","getItem","setInterval","sendPricePusher","bind","price","className","Component","History","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","getBTCPrices","getETHPrices","getLTCPrices","date","t","moment","unix","all","spread","eth","btc","ltc","f","format","JSON","stringify","subtract","getTodayPrice","getYesterdayPrice","getTwoDaysPrice","getThreeDaysPrice","getFourDaysPrice","parse","App","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f2a8e408.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Today.css'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\n\n\nclass Today extends Component {\n    // Adds a class constructor that assigns the initial state values:\n    constructor() {\n        super();\n        this.state = {\n            btcprice: '',\n            ltcprice: '',\n            ethprice: ''\n        };\n    }\n\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount() {\n        axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n            .then(response => {\n                this.setState({btcprice: response.data.BTC.USD});\n                localStorage.setItem('BTC', response.data.BTC.USD);\n\n                this.setState({ethprice: response.data.ETH.USD});\n                localStorage.setItem('ETH', response.data.ETH.USD);\n\n                this.setState({ltcprice: response.data.LTC.USD});\n                localStorage.setItem('LTC', response.data.LTC.USD);\n            })\n            .catch(error => {\n                console.log(error)\n            })\n\n        // establish a connection to Pusher\n        this.pusher = new Pusher('9dc96423f52ba07a787b', {\n            cluster: 'eu',\n            encrypted: true\n        });\n        // Subscribe to the 'coin-prices' channel\n        this.prices = this.pusher.subscribe('coin-prices');\n    }\n\n    sendPricePusher(data) {\n        axios.post('/prices/new', {\n            prices: data\n        })\n            .then(response => {\n                console.log(response)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    componentDidMount() {\n        if (!navigator.onLine) {\n            this.setState({ btcprice: localStorage.getItem('BTC') });\n            this.setState({ ethprice: localStorage.getItem('ETH') });\n            this.setState({ ltcprice: localStorage.getItem('LTC') });\n        }\n        setInterval(() => {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD')\n                .then(response => {\n                    this.sendPricePusher(response.data)\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        }, 10000)\n\n        // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes\n        this.prices.bind('prices', price => {\n            this.setState({btcprice: price.prices.BTC.USD});\n            this.setState({ethprice: price.prices.ETH.USD});\n            this.setState({ltcprice: price.prices.LTC.USD});\n        }, this);\n    }\n\n    // The render method contains the JSX code which will be compiled to HTML.\n    render() {\n        return (\n            <div className=\"today--section container\">\n                <h2>Current Price</h2>\n                <div className=\"columns today--section__box\">\n                    <div className=\"column btc--section\">\n                        <h5>${this.state.btcprice}</h5>\n                        <p>1 BTC</p>\n                    </div>\n                    <div className=\"column eth--section\">\n                        <h5>${this.state.ethprice}</h5>\n                        <p>1 ETH</p>\n                    </div>\n                    <div className=\"column ltc--section\">\n                        <h5>${this.state.ltcprice}</h5>\n                        <p>1 LTC</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Today;\n","import React, { Component } from 'react';\nimport './History.css'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default class History extends Component {\n    constructor () {\n        super();\n        this.state = {\n            todayprice: {},\n            yesterdayprice: {},\n            twodaysprice: {},\n            threedaysprice: {},\n            fourdaysprice: {}\n        }\n        this.getBTCPrices = this.getBTCPrices.bind(this);\n        this.getETHPrices = this.getETHPrices.bind(this);\n        this.getLTCPrices = this.getLTCPrices.bind(this);\n    }\n    // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\n    getETHPrices (date) {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=' + date);\n    }\n    // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n    getBTCPrices (date) {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=' + date);\n    }\n    // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n    getLTCPrices (date) {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=' + date);\n    }\n    // This function gets the prices for the current date.\n    getTodayPrice () {\n        // Get today's date in timestamp\n        let t = moment().unix()\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                console.log(eth.data,btc.data,ltc.data);\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                localStorage.setItem('todayprice', JSON.stringify(f));\n                // Set the state of todayprice to the content of the object f\n                this.setState({ todayprice: f });\n            }));\n    }\n    // This function gets the prices for the yesterday.\n    getYesterdayPrice () {\n        // Get yesterday's date in timestamp\n        let t = moment().subtract(1, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                localStorage.setItem('yesterdayprice', JSON.stringify(f));\n                // Set the state of yesterdayprice to the content of the object f\n                this.setState({ yesterdayprice: f });\n            }));\n    }\n    // This function gets the prices for the two days ago.\n    getTwoDaysPrice () {\n        // Get the date for two days ago in timestamp\n        let t = moment().subtract(2, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                localStorage.setItem('twodaysprice', JSON.stringify(f));\n                // Set the state of twodaysprice to the content of the object f\n                this.setState({ twodaysprice: f });\n            }));\n    }\n    // This function gets the prices for the three days ago.\n    getThreeDaysPrice () {\n        // Get the date for three days ago in timestamp\n        let t = moment().subtract(3, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                console.log(eth.data,btc.data,ltc.data);\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                localStorage.setItem('threedaysprice', JSON.stringify(f));\n                // Set the state of threedaysprice to the content of the object f\n                this.setState({ threedaysprice: f });\n            }));\n    }\n    // This function gets the prices for the four days ago.\n    getFourDaysPrice () {\n        // Get the date for four days ago in timestamp\n        let t = moment().subtract(4, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) => {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                localStorage.setItem('fourdaysprice', JSON.stringify(f));\n                // Set the state of fourdaysprice to the content of the object f\n                this.setState({ fourdaysprice: f });\n            }));\n    }\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount () {\n        this.getTodayPrice();\n        this.getYesterdayPrice();\n        this.getTwoDaysPrice();\n        this.getThreeDaysPrice();\n        this.getFourDaysPrice();\n    }\n\n    componentDidMount() {\n        if (!navigator.onLine) {\n            this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\n            this.setState({ yesterdayprice: JSON.parse(localStorage.getItem('yesterdayprice')) });\n            this.setState({ twodaysprice: JSON.parse(localStorage.getItem('twodaysprice')) });\n            this.setState({ threedaysprice: JSON.parse(localStorage.getItem('threedaysprice')) });\n            this.setState({ fourdaysprice: JSON.parse(localStorage.getItem('fourdaysprice')) });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"history--section container\">\n                <h2>History (Past 5 days)</h2>\n                <div className=\"history--section__box\">\n                    <div className=\"history--section__box__inner\">\n                        <h4>{this.state.todayprice.date}</h4>\n                        <div className=\"columns\">\n                            <div className=\"column\">\n                                <p>1 BTC = ${this.state.todayprice.btc}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 ETH = ${this.state.todayprice.eth}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 LTC = ${this.state.todayprice.ltc}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"history--section__box__inner\">\n                        <h4>{this.state.yesterdayprice.date}</h4>\n                        <div className=\"columns\">\n                            <div className=\"column\">\n                                <p>1 BTC = ${this.state.yesterdayprice.btc}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 ETH = ${this.state.yesterdayprice.eth}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 LTC = ${this.state.yesterdayprice.ltc}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"history--section__box__inner\">\n                        <h4>{this.state.twodaysprice.date}</h4>\n                        <div className=\"columns\">\n                            <div className=\"column\">\n                                <p>1 BTC = ${this.state.twodaysprice.btc}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 ETH = ${this.state.twodaysprice.eth}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 LTC = ${this.state.twodaysprice.ltc}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"history--section__box__inner\">\n                        <h4>{this.state.threedaysprice.date}</h4>\n                        <div className=\"columns\">\n                            <div className=\"column\">\n                                <p>1 BTC = ${this.state.threedaysprice.btc}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 ETH = ${this.state.threedaysprice.eth}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 LTC = ${this.state.threedaysprice.ltc}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"history--section__box__inner\">\n                        <h4>{this.state.fourdaysprice.date}</h4>\n                        <div className=\"columns\">\n                            <div className=\"column\">\n                                <p>1 BTC = ${this.state.fourdaysprice.btc}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 ETH = ${this.state.fourdaysprice.eth}</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 LTC = ${this.state.fourdaysprice.ltc}</p>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\n\n","// Import React and Component\nimport React, { Component } from 'react';\n// Import CSS from App.css\nimport './App.css';\n// Import the Today component to be used below\nimport Today from './Today'\n// Import the History component to be used below\nimport History from './History'\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"\">\n          <div className=\"topheader\">\n            <header className=\"container\">\n              <nav className=\"navbar\">\n                <div className=\"navbar-brand\">\n                  <span className=\"navbar-item\">PusherCoins</span>\n                </div>\n                <div className=\"navbar-end\">\n                  <a className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\">Pusher.com</a>\n                </div>\n              </nav>\n            </header>\n          </div>\n          <section className=\"results--section\">\n            <div className=\"container\">\n              <h1>PusherCoins is a realtime price information about<br></br> BTC, ETH and LTC.</h1>\n            </div>\n            <div className=\"results--section__inner\">\n              <Today />\n              <History />\n            </div>\n          </section>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}